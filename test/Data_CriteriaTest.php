<?php
/**
 * Test class for Criteria.
 * Generated by PHPUnit on 2011-02-07 at 10:39:14.
 */
use Sfcms\Data\Field;
use Sfcms\Data\Query\Builder as QueryBuilder;

class TestTable extends \Sfcms\Data\Table
{
    /**
     * Вернет имя таблицы
     * @return string
     */
    public static function table()
    {
        return 'test';
    }

    /**
     * Создаст список полей
     * @return array
     */
    protected static function doFields()
    {
        return array(
            new Field\Int('id'),
            new Field\Int('parent'),
            new Field\Int('active'),
        );
    }
}

class CriteriaTest extends PHPUnit_Framework_TestCase
{
    /**
     * @var QueryBuilder
     */
    protected $object;
    
    protected $table;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {

        if ( ! isset( $this->table ) ) {
            $this->table  = new TestTable();
        }
    }


    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    /**
     * Проверка Criteria::getSQL
     */
    public function testGetSQL()
    {
        $criteria   = new QueryBuilder($this->table, array());

        $sql    = "SELECT `id`,`parent`,`active` FROM `{$this->table}`";

        $this->assertEquals( $sql, $criteria->getSQL() );

        //print( "\n".preg_replace('/\s+/', ' ', $criteria->getSQL() )."\n" );

        $criteria   = new QueryBuilder($this->table, array(
            'cond'      => '`param1` = :param1 AND `param2` = :param2 AND `par3` = ? AND `par4` = ?',
            'params'    => array(':param1'=>'foo1', ':param2'=>'fo\'o2', 'fo"o3', 'foo4'),
            'order'     => '`pos` DESC',
            'limit'     => '1, 2'
        ));

        $sql    = "SELECT `id`,`parent`,`active` FROM `{$this->table}` ".
                "WHERE `param1` = 'foo1' AND `param2` = 'fo&#39;o2' AND `par3` = 'fo&#34;o3' AND `par4` = 'foo4' ".
                "ORDER BY `pos` DESC LIMIT 1, 2";

        $this->assertEquals( $sql, $criteria->getSQL() );

    }

    /**
     * Проверка передачи массива параметров для
     */
    public function testParamArray()
    {
        $criteria   = new QueryBuilder( $this->table, array(
            'cond'      => '`id` IN (:list) ',
            'params'    => array(':list'=>array(1,2,3)),
        ));

        $sql    = "SELECT `id`,`parent`,`active` FROM `{$this->table}` WHERE `id` IN (1,2,3)";

        $this->assertEquals( $criteria->getSQL(), $sql );


        $criteria = new QueryBuilder($this->table,array(
            'cond'  => '`id` IN (?)',
            'params'=> array(array(0,1,2,3)),
        ));

        $this->assertEquals(
            'SELECT `id`,`parent`,`active` FROM `test` WHERE `id` IN (0,1,2,3)',
            $criteria->getSQL()
        );


        $criteria = new QueryBuilder($this->table,array(
            'cond'  => '`id` IN (?)',
            'params'=> array(array('',1,2,3)),
        ));

        $this->assertEquals(
            'SELECT `id`,`parent`,`active` FROM `test` WHERE `id` IN (1,2,3)',
            $criteria->getSQL()
        );


        $criteria = new QueryBuilder($this->table,array(
            'cond'  => '`id` IN (?)',
            'params'=> array(array('a','b','c','d')),
        ));

        $this->assertEquals(
            'SELECT `id`,`parent`,`active` FROM `test` WHERE `id` IN (\'a\',\'b\',\'c\',\'d\')',
            $criteria->getSQL()
        );
    }

    /**
     * Проверка Criteria::getParams
     */
    public function testGetParams()
    {
        $criteria   = new QueryBuilder($this->table, array(
            'params'    => array('test', ':test'=>'test'),
        ));
        $this->assertEquals( $criteria->getParams(), array('test', ':test'=>'test'), 'Params not correspond' );
    }

    public function testGetAllPages()
    {
        $criteria = new QueryBuilder($this->table, array(
            'cond'      => '`deleted` = ?',
            'params'    => array(0),
            'order'     => '`pos`',
        ));

        $this->assertEquals(
            'SELECT `id`,`parent`,`active` FROM `test` WHERE `deleted` = 0 ORDER BY `pos`',
            $criteria->getSQL()
        );
    }
}
