<?php
use Module\User\Controller\UserController;

/**
 * Test class for Controller_Users.
 * Generated by PHPUnit on 2012-04-20 at 20:50:17.
 */
class Controller_UsersTest extends \Sfcms\Test\TestCase
{
    /**
     * @var \Sfcms\Request
     */
    protected $request;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        parent::setUp();
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    /**
     * Инициализвция
     */
    public function testInit()
    {
        new UserController($this->request);
        $this->assertEquals('inner', $this->request->getTemplate());
    }

    /**
     * Права доступа
     */
    public function testAccess()
    {
        $controller = new UserController($this->request);
        $access = $controller->access();
        $this->assertArrayHasKey(USER_ADMIN, $access);
        $this->assertContains('admin', $access[USER_ADMIN]);
        $this->assertContains('adminEdit', $access[USER_ADMIN]);
        $this->assertContains('save', $access[USER_ADMIN]);
    }

    /**
     * Действие по умолчанию
     */
    public function testIndexAction()
    {
        $response = $this->runController('user', 'index');
        $crawler = $this->createCrawler($response);
        $form = $crawler->filterXPath('//form');
        $this->assertEquals(1, $form->count());
        $this->assertEquals('form_login', $form->attr('id'));
        $this->assertEquals('form_login', $form->attr('name'));
        $this->assertEquals('form-horizontal', $form->attr('class'));
        $this->assertEquals('/user/login', $form->attr('action'));
        $this->assertEquals('post', $form->attr('method'));
        $this->assertEquals('multipart/form-data', $form->attr('enctype'));
    }

    /**
     * Действие админа
     */
    public function testAdminAction()
    {
        $response = $this->runController('user', 'index');
        $crawler = $this->createCrawler($response);
        $form = $crawler->filterXPath('//form');
        $this->assertEquals(1, $form->count());
        $this->assertEquals('form_login', $form->attr('id'));
    }

    /**
     * Редактирование пользователя в админке
     */
    public function testAdminEditAction()
    {
        $response = $this->runController('user', 'adminEdit');
        $this->assertEquals(302, $response->getStatusCode());
        $crawler = $this->createCrawler($response);
        $this->assertEquals(1, $crawler->filterXPath('//title')->count());
        $this->assertEquals('Redirecting to /user/login', $crawler->filterXPath('//title')->text());

        $this->session->set('user_id', 1);
        $response = $this->runController('user', 'adminEdit');
        $crawler = $this->createCrawler($response);
        $this->assertEquals(200, $response->getStatusCode());
        $this->assertEquals('Добавить пользователя / SiteForeverCMS', $crawler->filterXPath('//title')->text());
        $form = $crawler->filterXPath('//form');
        $this->assertEquals('form_user', $form->attr('id'));
    }

    /**
     * Сохранение
     */
    public function testSaveAction()
    {
        $this->session->set('user_id', 1);
        $response = $this->runController('user', 'save');
        $crawler = $this->createCrawler($response);
        $this->assertEquals(200, $response->getStatusCode());

        $this->assertEquals('Data not sent', trim($crawler->filterXPath('//div[@id="workspace"]')->text()));
    }

    /**
     * Вход
     */
    public function testLoginAction()
    {
        $response = $this->runController('user', 'login');
        $crawler = $this->createCrawler($response);
        $this->assertEquals(200, $response->getStatusCode());
        $form = $crawler->filterXPath('//form');
        $this->assertEquals(1, $form->count());
        $this->assertEquals('form_login', $form->attr('id'));
    }

    /**
     * Кабинет
     */
    public function testCabinetAction()
    {
//        $return = $this->controller->cabinetAction();
    }

    /**
     * Правка профиля
     */
    public function testEditAction()
    {
        $this->session->set('user_id', 1);
        $response = $this->runController('user', 'login');
        $crawler = $this->createCrawler($response);
        $this->assertEquals(302, $response->getStatusCode());
        $this->assertEquals('Redirecting to /user/cabinet', $crawler->filterXPath('//title')->text());

        $response = $this->runController('user', 'cabinet');
        $crawler = $this->createCrawler($response);
        $this->assertEquals(200, $response->getStatusCode());
        $this->assertEquals('Кабинет пользователя / SiteForeverCMS', $crawler->filterXPath('//title')->text());
        $this->assertEquals('Кабинет пользователя', $crawler->filterXPath('//h1')->text());
    }

    /**
     * Регистрация
     */
    public function testRegisterAction()
    {
        $response = $this->runController('user', 'register');
        $crawler = $this->createCrawler($response);
        $this->assertEquals(200, $response->getStatusCode());
        $form = $crawler->filterXPath('//form[@id="form_register"]');
        $this->assertEquals(1, $form->count());
        $this->assertEquals('', $form->attr('action'));
        $this->assertEquals('form_register', $form->attr('name'));
        $this->assertEquals(1, $crawler->filterXPath('//input[@id="register_email"]')->count());
        $this->assertEquals(1, $crawler->filterXPath('//input[@id="register_login"]')->count());
        $this->assertEquals(1, $crawler->filterXPath('//input[@id="register_password"]')->count());
        $this->assertEquals(1, $crawler->filterXPath('//input[@id="register_fname"]')->count());
        $this->assertEquals(1, $crawler->filterXPath('//input[@id="register_lname"]')->count());
        $this->assertEquals(1, $crawler->filterXPath('//input[@id="register_phone"]')->count());
        $this->assertEquals(1, $crawler->filterXPath('//input[@id="register_captcha"]')->count());
        $this->assertEquals(1, $crawler->filterXPath('//input[@id="register_submit"]')->count());

        $_SESSION['_sf2_attributes']['captcha_code'] = 'test';
//        $this->request->getSession()->set('captcha_code', 'test');
//        $this->request->getSession()->save();
        $this->request->setMethod('POST');
        $_POST['register'] = array(
            'email' => 'test_user@example.com',
            'login' => 'test_user',
            'password' => 'test_test',
            'fname' => 'test',
            'lname' => 'user',
            'phone' => '89005555555',
            'captcha' => 'test',
        );
        $response = $this->runController('user', 'register');
        $crawler = $this->createCrawler($response);
        $this->assertEquals('Регистрация прошла успешно. На Ваш Email отправлена ссылка для подтверждения регистрации.',
            $crawler->filterXPath('//div[@class="alert"]')->text()
        );
    }

    /**
     * Восстановление
     */
    public function testRestoreAction()
    {
        $this->markTestSkipped();
//        $return = $this->controller->restoreAction();
//        $result = $this->request->getContent();
//
//        $this->assertEmpty($result);
//
//        $this->assertInternalType('array', $return);
//        $this->arrayHasKey('form', $return);
//        $this->assertInternalType('string', $return['form']->html());
//        $this->assertStringStartsWith(
//            '<form action="/user/restore" class="form-horizontal" '
//                . 'enctype="multipart/form-data" id="form_restore" method="post" name="form_restore"',
//            $return['form']->html()
//        );
    }

    public function testRecoveryAction()
    {
        $this->markTestSkipped();
//        $return = $this->controller->recoveryAction(null,null);
//        $result = $this->request->getContent();
//
//        $this->assertEmpty( $result );
//
//        $this->assertInternalType('array',$return);
//        $this->assertArrayHasKey('error', $return);
//        $this->assertEquals(1, $return['error']);
//        $this->assertArrayHasKey('msg', $return);
//        $this->assertEquals("Не указаны параметры восстановления",$return['msg']);
//
//        $return = $this->controller->recoveryAction('sdsadsd@ermin.ru','123232afsdfsdfs');
//        $this->assertInternalType('array',$return);
//        $this->assertArrayHasKey('error', $return);
//        $this->assertEquals(1, $return['error']);
//        $this->assertArrayHasKey('msg', $return);
//        $this->assertEquals("Ваш email не найден",$return['msg']);
//
//        $return = $this->controller->recoveryAction('admin@ermin.ru','123232afsdfsdfs');
//        $this->assertInternalType('array',$return);
//        $this->assertArrayHasKey('error', $return);
//        $this->assertEquals(1, $return['error']);
//        $this->assertArrayHasKey('msg', $return);
//        $this->assertEquals("Неверный код восстановления",$return['msg']);
    }

    /**
     * Пароль
     */
    public function testPasswordAction()
    {
        $this->markTestSkipped();
//        $return = $this->controller->passwordAction();
//        $result = $this->request->getContent();
//
//        $this->assertEmpty($result);
//        $this->assertStringStartsWith(
//            '<form action="" class="form-horizontal" enctype="multipart/form-data" id="form_password"',
//            $return
//        );
    }
}
