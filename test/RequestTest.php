<?php
/**
 * Test class for Request.
 * Generated by PHPUnit on 2011-02-04 at 16:39:55.
 */
use Sfcms\Request;

class RequestTest extends PHPUnit_Framework_TestCase
{
    /**
     * @var Request
     */
    protected $request;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $_REQUEST['test1']  = 'test1';
        $_REQUEST['test2']  = 'test2';
        $_REQUEST['email']  = 'foo@example.com';
        $_REQUEST['test']['foo']    = 'foo';
        $_REQUEST['digit']  = 5;
        $this->request = new Request();
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    /**
     */
    public function testGetAjax()
    {
        $this->assertFalse( $this->request->getAjax() );
    }

    /**
     */
    public function testIsAjax()
    {
        $this->assertFalse( $this->request->isAjax() );
    }

    /**
     */
    public function testGetAjaxType()
    {
        $this->assertEquals( $this->request->getAjaxType(), Request::TYPE_ANY, 'Ajax type not ANY' );
    }

    /**
     */
    public function testGetError()
    {
        $this->assertEquals( $this->request->getError(), 0, 'Error found' );
    }

    /**
     */
    public function testSetError()
    {
        $this->request->setError(7);
        $this->assertEquals( $this->request->getError(), 7, 'Digit error test fail' );

        $this->request->setError('Text');
        $this->assertEquals( $this->request->getError(), 'Text', 'Text error test fail' );
    }

//    public function testGetStyle()
//    {
//        $this->markTestSkipped();
//        $styles = $this->request->getStyle();
//
//        $this->assertTrue(is_array( $styles ), 'Styles list not Array');
//        $this->assertEquals( count( $styles ), 3, 'Count default styles not equal 3' );
//    }

//    public function testAddStyle()
//    {
//        $this->markTestSkipped();
//        $this->request->addStyle('/css/style.css');
//
//        $styles = $this->request->getStyle();
//
//        $this->assertEquals( count( $styles ), 4, 'Count styles not equal 4' );
//
//        $found = false;
//        foreach ( $styles as $style ) {
//            if ( $style == '/css/style.css' ) {
//                $found = true;
//            }
//        }
//        $this->assertTrue( $found, 'Added style not found' );
//    }

//    public function testCleanStyle()
//    {
//        $this->markTestSkipped();
//        $this->request->cleanStyle();
//        $this->assertEquals( count( $this->request->getStyle() ), 0, 'Styles list not cleared' );
//    }

//    public function testGetScript()
//    {
//        $this->markTestSkipped();
//        $scripts    = $this->request->getScript();
//        $this->assertTrue( is_array( $scripts ), 'Scripts list fail format' );
//        $this->assertEquals( count( $scripts ), 3, 'Default scripts list count not equal 2' );
//    }

//    public function testAddScript()
//    {
//        $this->markTestSkipped();
//        $this->request->addScript('/js/script.js');
//
//        $scripts = $this->request->getScript();
//
//        $this->assertEquals( count( $scripts ), 4, 'Count scripts not equal 3' );
//
//        $found = false;
//        foreach ( $scripts as $script ) {
//            if ( $script == '/js/script.js' ) {
//                $found = true;
//            }
//        }
//        $this->assertTrue( $found, 'Added script not found' );
//    }

//    public function testCleanScript()
//    {
//        $this->markTestSkipped();
//        $this->request->cleanScript();
//        $this->assertEquals( count( $this->request->getScript() ), 0, 'Scripts list not cleared' );
//    }

    public function testSet()
    {
        $this->request->set('test', 'test');
        $this->assertEquals( $this->request->get('test'), 'test', 'Setted value not equal getted value' );
    }

    public function testGet()
    {
        $this->assertEquals( $this->request->get('digit', FILTER_SANITIZE_NUMBER_INT), 5,
                'Sanitize number int test fail' );
        $this->assertEquals( $this->request->get('test1'), 'test1', 'String value fail' );
        $this->assertEquals( $this->request->get('test2', FILTER_SANITIZE_STRING), 'test2', 'String value fail' );
        $this->assertEquals( $this->request->get('email', FILTER_SANITIZE_EMAIL), 'foo@example.com', 'Email value fail' );
        $this->assertTrue( is_array( $this->request->get('test') ), 'Array value getted not as array' );
        $this->assertEquals( $this->request->get('test.foo'), 'foo', 'Chain do not work' );
    }

    public function testGetNol()
    {
        $this->request->set('nol', 0);
        $this->assertEquals(0, $this->request->get('nol'));
    }

    /**
     */
    public function testSetContent()
    {
        $this->request->setContent('My content');
        $this->assertEquals($this->request->getContent(), 'My content', 'Broken content information');
    }

    /**
     */
    public function testGetContent()
    {
        $this->request->setContent('My content');
        $this->assertEquals($this->request->getContent(), 'My content', 'Broken content information');
    }

    /**
     */
    public function testSetTitle()
    {
        $this->request->setTitle('My content');
        $this->assertEquals($this->request->getTitle(), 'My content', 'Broken title information');
    }

    /**
     */
    public function testGetTitle()
    {
        $this->request->setTitle('My content');
        $this->assertEquals($this->request->getTitle(), 'My content', 'Broken title information');
    }

    /**
     */
    public function testAddFeedback()
    {
        $this->request->addFeedback('Test');
        $feedback   = $this->request->getFeedback();
        $this->assertTrue( in_array( 'Test', $feedback ), 'Feedback Test not found' );
    }

    /**
     */
    public function testGetFeedback()
    {
        $this->request->addFeedback('Test');
        $feedback   = $this->request->getFeedback();
        $this->assertTrue( in_array( 'Test', $feedback ), 'Feedback Test not found' );
        $this->request->addFeedback(array('Test1', 'Test2'));
        $feedback   = $this->request->getFeedback();
        $this->assertTrue( in_array( 'Test1', $feedback ), 'Feedback Test1 not found' );
        $this->assertTrue( in_array( 'Test2', $feedback ), 'Feedback Test2 not found' );
    }

    /**
     */
    public function testGetFeedbackString()
    {
        $this->request->addFeedback('Test1');
        $this->request->addFeedback('Test2');
        $this->assertEquals( $this->request->getFeedbackString("\n"), "Test1\nTest2", 'Feedback String fail' );
    }

    public function testGetResponseAsXML()
    {
        $this->request->setResponseError(10,'test error');
        $this->assertEquals("<?xml version=\"1.0\"?>\n<response><error>10</error><msg>test error</msg></response>\n",
            $this->request->getResponseAsXML());
    }

    public function testGetResponseAsJson()
    {
        $this->request->setResponseError(10,'test error');
        $this->assertEquals("{\"error\":10,\"msg\":\"test error\"}",
            $this->request->getResponseAsJson());
    }
}
