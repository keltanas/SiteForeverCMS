<?php
/**
 * Test class for Request.
 * Generated by PHPUnit on 2011-02-04 at 16:39:55.
 */
class RequestTest extends PHPUnit_Framework_TestCase
{
    /**
     * @var Request
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $_REQUEST['test1']  = 'test1';
        $_REQUEST['test2']  = 'test2';
        $_REQUEST['email']  = 'foo@example.com';
        $_REQUEST['test']['foo']    = 'foo';
        $_REQUEST['digit']  = 5;
        $this->object = new Request;
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    /**
     * @todo Implement testGetAjax().
     */
    public function testGetAjax()
    {
        $this->assertFalse( $this->object->getAjax(), 'Not ajax' );
    }

    /**
     * @todo Implement testIsAjax().
     */
    public function testIsAjax()
    {
        $this->assertFalse( $this->object->isAjax(), 'Not ajax' );
    }

    /**
     * @todo Implement testGetAjaxType().
     */
    public function testGetAjaxType()
    {
        $this->assertEquals( $this->object->getAjaxType(), Request::TYPE_ANY, 'Ajax type not ANY' );
    }

    /**
     * @todo Implement testGetError().
     */
    public function testGetError()
    {
        $this->assertEquals( $this->object->getError(), 0, 'Error found' );
    }

    /**
     * @todo Implement testSetError().
     */
    public function testSetError()
    {
        $this->object->setError(7);
        $this->assertEquals( $this->object->getError(), 7, 'Digit error test fail' );

        $this->object->setError('Text');
        $this->assertEquals( $this->object->getError(), 'Text', 'Text error test fail' );
    }

    /**
     * @todo Implement testGetStyle().
     */
    public function testGetStyle()
    {
        $styles = $this->object->getStyle();

        $this->assertTrue(is_array( $styles ), 'Styles list not Array');
        $this->assertEquals( count( $styles ), 3, 'Count default styles not equal 3' );
    }

    /**
     * @todo Implement testAddStyle().
     */
    public function testAddStyle()
    {
        $this->object->addStyle('/css/style.css');

        $styles = $this->object->getStyle();

        $this->assertEquals( count( $styles ), 4, 'Count styles not equal 4' );

        $found = false;
        foreach ( $styles as $style ) {
            if ( $style == '/css/style.css' ) {
                $found = true;
            }
        }
        $this->assertTrue( $found, 'Added style not found' );
    }

    /**
     * @todo Implement testCleanStyle().
     */
    public function testCleanStyle()
    {
        $this->object->cleanStyle();
        $this->assertEquals( count( $this->object->getStyle() ), 0, 'Styles list not cleared' );
    }

    /**
     * @todo Implement testGetScript().
     */
    public function testGetScript()
    {
        $scripts    = $this->object->getScript();
        $this->assertTrue( is_array( $scripts ), 'Scripts list fail format' );
        $this->assertEquals( count( $scripts ), 3, 'Default scripts list count not equal 2' );
    }

    /**
     * @todo Implement testAddScript().
     */
    public function testAddScript()
    {
        $this->object->addScript('/js/script.js');

        $scripts = $this->object->getScript();

        $this->assertEquals( count( $scripts ), 4, 'Count scripts not equal 3' );

        $found = false;
        foreach ( $scripts as $script ) {
            if ( $script == '/js/script.js' ) {
                $found = true;
            }
        }
        $this->assertTrue( $found, 'Added script not found' );
    }

    /**
     * @todo Implement testCleanScript().
     */
    public function testCleanScript()
    {
        $this->object->cleanScript();
        $this->assertEquals( count( $this->object->getScript() ), 0, 'Scripts list not cleared' );
    }

    /**
     * @todo Implement testSet().
     */
    public function testSet()
    {
        $this->object->set('test', 'test');
        $this->assertEquals( $this->object->get('test'), 'test', 'Setted value not equal getted value' );
    }

    /**
     * @todo Implement testGet().
     */
    public function testGet()
    {
        $this->assertEquals( $this->object->get('digit', FILTER_SANITIZE_NUMBER_INT), 5,
                'Sanitize number int test fail' );
        $this->assertEquals( $this->object->get('test1'), 'test1', 'String value fail' );
        $this->assertEquals( $this->object->get('test2', FILTER_SANITIZE_STRING), 'test2', 'String value fail' );
        $this->assertEquals( $this->object->get('email', FILTER_SANITIZE_EMAIL), 'foo@example.com', 'Email value fail' );
        $this->assertTrue( is_array( $this->object->get('test') ), 'Array value getted not as array' );
        $this->assertEquals( $this->object->get('test.foo'), 'foo', 'Chain do not work' );
    }

    /**
     * @todo Implement testSetContent().
     */
    public function testSetContent()
    {
        $this->object->setContent('My content');
        $this->assertEquals($this->object->getContent(), 'My content', 'Broken content information');
    }

    /**
     * @todo Implement testGetContent().
     */
    public function testGetContent()
    {
        $this->object->setContent('My content');
        $this->assertEquals($this->object->getContent(), 'My content', 'Broken content information');
    }

    /**
     * @todo Implement testSetTitle().
     */
    public function testSetTitle()
    {
        $this->object->setTitle('My content');
        $this->assertEquals($this->object->getTitle(), 'My content', 'Broken title information');
    }

    /**
     * @todo Implement testGetTitle().
     */
    public function testGetTitle()
    {
        $this->object->setTitle('My content');
        $this->assertEquals($this->object->getTitle(), 'My content', 'Broken title information');
    }

    /**
     * @todo Implement testAddFeedback().
     */
    public function testAddFeedback()
    {
        $this->object->addFeedback('Test');
        $feedback   = $this->object->getFeedback();
        $this->assertTrue( in_array( 'Test', $feedback ), 'Feedback Test not found' );
    }

    /**
     * @todo Implement testGetFeedback().
     */
    public function testGetFeedback()
    {
        $this->object->addFeedback('Test');
        $feedback   = $this->object->getFeedback();
        $this->assertTrue( in_array( 'Test', $feedback ), 'Feedback Test not found' );
        $this->object->addFeedback(array('Test1', 'Test2'));
        $feedback   = $this->object->getFeedback();
        $this->assertTrue( in_array( 'Test1', $feedback ), 'Feedback Test1 not found' );
        $this->assertTrue( in_array( 'Test2', $feedback ), 'Feedback Test2 not found' );
    }

    /**
     * @todo Implement testGetFeedbackString().
     */
    public function testGetFeedbackString()
    {
        $this->object->addFeedback('Test1');
        $this->object->addFeedback('Test2');
        $this->assertEquals( $this->object->getFeedbackString("\n"), "Test1\nTest2", 'Feedback String fail' );
    }

    /**
     * @todo Implement testDebug().
     */
    public function testDebug()
    {
    }
}
?>
