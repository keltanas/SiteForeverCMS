<?php
use Sfcms\Model;
use Sfcms\db;
use Sfcms\Kernel\AbstractKernel as Kernel;
use Module\System\Object\Test as TestObject;
use Sfcms\Data\Watcher;
use Sfcms\Data\Collection;

/**
 * Test class for Model.
 * Generated by PHPUnit on 2011-02-07 at 18:49:00.
 */
class ModelTest extends PHPUnit_Framework_TestCase
{
    /**
     * @var Model
     */
    protected $model = null;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        if ( null === $this->model ) {
            $this->model = Model::getModel('System.Test');
        }
        Watcher::instance()->clear();
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
        Watcher::instance()->clear();
    }

    /**
     *
     */
    public function testGetDB()
    {
        $this->assertTrue( $this->model->getDB() instanceof db );
    }

    /**
     *
     */
    public function testApp()
    {
        $this->assertTrue( $this->model->app() instanceof Kernel );
    }

    /**
     *
     */
    public function testGetModel()
    {
        $this->assertTrue(
            $this->model->getModel('System.Test') instanceof \Module\System\Model\TestModel
        );
    }

    /**
     *
     */
    public function testCreateObject()
    {
        /** @var $obj TestObject */
        $obj = $this->model->createObject();
        if (!$obj) {
            $this->fail('Created object ' . var_export($obj, true));
        }
        $this->assertTrue($obj instanceof TestObject);
        $obj->markClean();
    }

    /**
     *
     */
    public function testObjectClass()
    {
        $this->assertEquals($this->model->objectClass(), '\Module\System\Object\Test');
    }

    /**
     *
     */
    public function testTableClass()
    {
        $this->assertEquals($this->model->tableClass(), '\Module\System\Object\Test');
    }

    /**
     *
     */
    public function testGetTable()
    {
        $this->assertEquals( 'test', $this->model->getTable() );
    }

    /**
     *
     */
    public function testTable()
    {
        $object_class = $this->model->objectClass();
        $this->assertEquals(call_user_func(array($object_class, 'table')), 'test');
    }

    /**
     *
     */
    public function testSave()
    {
        $obj1 = $this->model->createObject();
        $obj1->value = 'val1';
        $obj2 = $this->model->createObject();
        $obj2->value = 'val2';
        $this->assertNotEquals(false, $this->model->save($obj1));
        $this->assertNotEquals(false, $this->model->save($obj2));
        $obj1->value = 'val11';
        $obj2->value = 'val22';
        $this->assertNotEquals(false, $this->model->save($obj1));
        $this->assertNotEquals(false, $this->model->save($obj2));
    }

    public function testCount()
    {
        $this->assertEquals(2, $this->model->count());
    }

    public function testFind()
    {
        $obj = $this->model->find(2);
        $this->assertNotNull($obj);
        $this->assertEquals(2, $obj->getId());
        $this->assertEquals('val22', $obj->value);

        $obj    = $this->model->find(1);
        $this->assertNotNull($obj);
        $this->assertEquals(1, $obj->getId());
        $this->assertEquals('val11', $obj->value);
    }

    public function testFindAll()
    {
        /** @var $all Collection */
        $all = $this->model->findAll();
        $this->assertEquals(2, $all->count());
        $this->assertEquals($all->getData(), array(
            array('id'=>1,'value'=>'val11'),
            array('id'=>2,'value'=>'val22'),
        ));
    }

    public function testDelete()
    {
        $this->model->delete(1);
        $this->assertNull( $this->model->find(1) );

        $this->model->delete(2);
        $this->assertNull( $this->model->find(2) );

        $this->assertEquals($this->model->count(), 0);

        $pdo = $this->model->getDB()->getResource();
        $pdo->exec("DROP TABLE `test`");
    }

//    public function testMigration()
//    {
//        $reflection = new ReflectionMethod( get_class( $this->object ), 'migration' );
//        $reflection->invoke( $this->object );
//    }
}
