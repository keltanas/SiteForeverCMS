<?php
/**
 * Test class for Basket.
 * Generated by PHPUnit on 2011-02-04 at 17:50:55.
 */
use Sfcms\Request;
use Symfony\Component\HttpFoundation\Session\Session;
use Symfony\Component\HttpFoundation\Session\Storage\MockArraySessionStorage;

class BasketTest extends \Sfcms\Test\WebCase
{
    /**
     * @var Sfcms\Basket\Base
     */
    protected $basket;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        parent::setUp();
        $this->basket = new Sfcms_Basket_Session($this->request);
        $this->basket->clear();
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
        parent::tearDown();
    }

    /**
     */
    public function testAdd()
    {
        $this->basket->add(null, 'product', 7, 5.55, 'some info');

        $this->assertEquals(1, $this->basket->count());
        $this->assertEquals(38.85, $this->basket->getSum());
        $this->assertEquals(7, $this->basket->getCount());

        $this->basket->clear();
        $this->basket->add(7, null, 4, 15000, null);
        $this->basket->add(10, null, 2, 18000, null);

        $this->assertEquals(6, $this->basket->getCount());
        $this->assertEquals(96000, $this->basket->getSum());

        $this->basket->setCount(10, 4);
        $this->basket->setCount(7, 3);
        $this->assertEquals(2, $this->basket->count());
        $this->assertEquals(7, $this->basket->getCount());
        $this->assertEquals(117000, $this->basket->getSum());
    }

    /**
     */
    public function testSetCount()
    {
        $this->basket->add(null, 'product', 1, 100);
        $this->assertTrue($this->basket->setCount('product', 10));
        $this->assertEquals(1000, $this->basket->getSum());
        $this->assertEquals(1000, $this->basket->getSum('product'));
    }

    /**
     */
    public function testGetCount()
    {
        $this->basket->add(null, 'product', 10, 5.55);
        $this->assertEquals(10, $this->basket->getCount('product'), 'Count not correspond test value');
        $this->basket->add(null, 'prod2', 5, 7.66, 'test prod');
        $this->assertEquals(15, $this->basket->getCount(), 'Count not correspond test value');
        $this->basket->add(null, 'product', 5, 5.65, 'prod for test');
        $this->assertEquals(20, $this->basket->getCount(), 'Count not correspond test value');
    }

    /**
     */
    public function testGetPrice()
    {
        $this->basket->add(null, 'product', 10, 5.55);
//        $this->basket->add(null, 'prod2', 5, 7.66, 'test prod');
        $this->basket->add(null, 'prod2', 5, 7.66, null);
        $this->assertEquals(5.55, $this->basket->getPrice('product'));
        $this->assertEquals(7.66, $this->basket->getPrice('prod2'));
    }

    /**
     */
    public function testCount()
    {
        $this->basket->add(null, 'prod1', 2);
        $this->basket->add(null, 'prod2', 3);
        $this->basket->add(null, 'prod3', 5);
        $this->assertEquals($this->basket->count(), 3);
    }

    /**
     */
    public function testGetSum()
    {
        $this->basket->add(null, 'product', 15, 5.55);
        $this->basket->add(null, 'prod2', 5, 7.66, null);
//        $this->basket->add(null, 'prod2', 5, 7.66, 'test prod');
        $this->assertEquals(83.25, $this->basket->getSum('product'));
        $this->assertEquals(38.3, $this->basket->getSum('prod2'));
        $this->assertEquals(121.55, $this->basket->getSum());
    }

    /**
     */
    public function testGetAll()
    {
        $this->basket->add(null, 'prod1', 2);
        $this->basket->add(null, 'prod2', 3);
        $this->basket->add(null, 'prod3', 5);
        $this->assertEquals(count($this->basket->getAll()), 3);
    }

    /**
     * Testing delete product
     */
    public function testDel()
    {
        // @TODO тут надо уточнять параметры, по которым удаляется продукт
        $this->basket->add(null, 'product', 15, 5.55);
        $this->basket->del(0, 7);
        $this->assertEquals(8, $this->basket->getCount('product'));
        $this->basket->del(0);
        $this->assertEquals(0, $this->basket->getCount('product'));
    }

    /**
     * Clear basket
     */
    public function testClear()
    {
        $this->basket->clear();
        $this->assertEquals(count($this->basket->getAll()), 0);
    }
}
