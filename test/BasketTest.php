<?php
/**
 * Test class for Basket.
 * Generated by PHPUnit on 2011-02-04 at 17:50:55.
 */
class BasketTest extends PHPUnit_Framework_TestCase
{
    /**
     * @var Basket
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $app    = App::getInstance();
        $this->object   = $app->getBasket();
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    /**
     * @todo Implement testAdd().
     */
    public function testAdd()
    {
        $this->object->add( 'product', 7, 5.55, 'some info' );

        $products   = $this->object->getAll();

        $found  = false;
        foreach ( $products as $product ) {
            if ( $product['id'] == 'product' ) {
                $found  = true;
                $this->assertEquals( $product['count'], 7, 'Count not equal' );
                $this->assertEquals( $product['price'], 5.55, 'Price not equal' );
                $this->assertEquals( $product['details'], 'some info', 'Details not equal' );
            }
        }

        $this->assertTrue( $found, 'Product not found' );
        $this->assertEquals( count( $this->object->getAll() ), 1, 'Product not added' );
    }

    /**
     * @todo Implement testSetCount().
     */
    public function testSetCount()
    {
        $this->assertTrue( $this->object->setCount('product', 10), 'Count not setted' );

        $products   = $this->object->getAll();

        foreach ( $products as $product ) {
            if ( $product['id'] == 'product' ) {
                $this->assertEquals( $product['count'], 10, 'Count not equal' );
                break;
            }
        }
    }

    /**
     * @todo Implement testGetCount().
     */
    public function testGetCount()
    {
        $this->assertEquals( $this->object->getCount('product'), 10, 'Count not correspond test value' );
        $this->object->add('prod2', 5, 7.66, 'test prod');
        $this->assertEquals( $this->object->getCount(), 15, 'Count not correspond test value' );
        $this->object->add('product', 5, 5.65, 'prod for test');
        $this->assertEquals( $this->object->getCount(), 20, 'Count not correspond test value' );
    }

    /**
     * @todo Implement testGetPrice().
     */
    public function testGetPrice()
    {
        $this->assertEquals( $this->object->getPrice('product'), 5.65 );
        $this->assertEquals( $this->object->getPrice('prod2'), 7.66 );
    }

    /**
     * @todo Implement testCount().
     */
    public function testCount()
    {
        $this->assertEquals( $this->object->getCount('product'), 15 );
        $this->assertEquals( $this->object->getCount('prod2'), 5 );
        $this->assertEquals( $this->object->getCount(), 20 );
    }

    /**
     * @todo Implement testGetSum().
     */
    public function testGetSum()
    {
        $this->assertEquals( $this->object->getSum('product'), 84.75 );
        $this->assertEquals( $this->object->getSum('prod2'), 38.3 );
        $this->assertEquals( $this->object->getSum(), 123.05 );
    }

    /**
     * @todo Implement testGetAll().
     */
    public function testGetAll()
    {
        $this->assertEquals( count( $this->object->getAll() ), 2 );
    }

    /**
     * @todo Implement testDel().
     */
    public function testDel()
    {
        $this->object->del('product', 7);
        $this->assertEquals( $this->object->getCount('product'), 8 );
    }

    /**
     * @todo Implement testClear().
     */
    public function testClear()
    {
        $this->object->clear();
        $this->assertEquals( count( $this->object->getAll() ), 0 );
    }
}
?>
