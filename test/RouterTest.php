<?php

/**
 * Test class for Router.
 * Generated by PHPUnit on 2011-02-16 at 17:04:19.
 */
class RouterTest extends PHPUnit_Framework_TestCase
{
    /**
     * @var Router
     */
    protected $router;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->router = App::getInstance()->getRouter();
        App::getInstance()->getRequest()->clearAll();
        App::getInstance()->getConfig()->set( 'url.rewrite', true );
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
        App::getInstance()->getRequest()->clearAll();
    }


    public function testFilterEqParams()
    {
        $this->assertEquals(
            'news/view',
            $this->router->filterEqParams( 'news/view/doc=35/page=10' )
        );
    }


    /**
     * @todo Implement testCreateLink().
     */
    public function testCreateLink()
    {
        App::getInstance()->getConfig()->set( 'url.rewrite', false );

        $url = 'example/foo';
        $params = array(
            'par1'=> 'val1',
            'par2'=> 'val2'
        );

        $this->assertEquals(
            "/?route={$url}&par1=val1&par2=val2",
            $this->router->createLink( $url, $params )
        );

        App::getInstance()->getConfig()->set( 'url.rewrite', true );

        $this->assertEquals(
            "/{$url}/par1=val1/par2=val2",
            $this->router->createLink( $url, $params )
        );
    }

    public function testCreateLink2()
    {
        $this->assertEquals(
            '/',
            $this->router->createLink( null )
        );
    }

    public function testCreateServiceLink2()
    {
        $this->assertEquals(
            '/',
            $this->router->createServiceLink( 'index' )
        );
    }

    public function testCreateLinkZendStyle()
    {
        $this->assertEquals(
            '/page/create/id/123/page/7',
            $this->router->createLink( null,
                array(
                    'controller'    => 'page',
                    'action'        => 'create',
                    'id'            => 123,
                    'page'          => 7,
                )
            )
        );
    }

    public function testCreateServiceLinkPage()
    {
        $this->assertEquals(
            '/page',
            $this->router->createServiceLink( 'page' )
        );
    }

    public function testCreateServiceLinkPage2()
    {
        $this->assertEquals(
            '/page/edit',
            $this->router->createServiceLink( 'page', 'edit' )
        );
    }

    public function testCreateServiceLinkPageNorewrite()
    {
        App::getInstance()->getConfig()->set( 'url.rewrite', false );
        $this->assertEquals(
            '/?route=page',
            $this->router->createServiceLink( 'page' )
        );
    }

    public function testCreateServiceLinkPage2Norewrite()
    {
        App::getInstance()->getConfig()->set( 'url.rewrite', false );
        $this->assertEquals(
            '/?route=page/edit',
            $this->router->createServiceLink( 'page', 'edit' )
        );
    }

    /**
     * @todo Implement testFindRoute().
     */
    public function testFindRoute()
    {
        // find route in routes.xml
        $request = App::getInstance()->getRequest();
        $request->set( 'controller', null );

        $this->router->setRoute( 'page/nameconvert/id/123/page/7' )->routing();
        $this->assertEquals( $request->get( 'controller' ), 'page' );
        $this->assertEquals( $request->get( 'action' ), 'nameconvert' );

        $this->assertEquals( '7', $request->get( 'page' ) );
        $this->assertEquals( '123', $request->get( 'id' ) );
    }

    public function testFindRouteNews()
    {
        $request = App::getInstance()->getRequest();
        $request->set( 'controller', null );

        $this->router->setRoute( 'news/doc=35' )->routing();
        $this->assertEquals( $request->get( 'controller' ), 'news' );
        $this->assertEquals( $request->get( 'action' ), 'index' );

        $this->assertEquals( '35', $request->get( 'doc' ) );
        $this->assertEquals( '1', $request->get( 'id' ) );
    }

    public function testFindRouteUsersCabinet()
    {
        $request = App::getInstance()->getRequest();
        $request->set( 'controller', null );

        $this->router->setRoute( 'users/cabinet' )->routing();
        $this->assertEquals( $request->get( 'controller' ), 'users' );
        $this->assertEquals( $request->get( 'action' ), 'cabinet' );
    }

    public function testFindRouteAdmin()
    {
        $request = App::getInstance()->getRequest();
        $request->set( 'controller', null );

        $this->router->setRoute( 'admin' );
        $this->router->routing();
        $this->assertEquals( $request->get( 'controller' ), 'page' );
        $this->assertEquals( $request->get( 'action' ), 'admin' );
    }

    public function testFindRouteUsersEdit()
    {
        $request = App::getInstance()->getRequest();
        $request->set( 'controller', null );

        $this->router->setRoute( 'users/edit' );
        $this->router->routing();
        $this->assertEquals( $request->get( 'controller' ), 'users' );
        $this->assertEquals( $request->get( 'action' ), 'edit' );
    }

    public function testFindRouteBasket()
    {
        $request = App::getInstance()->getRequest();
        $request->set( 'controller', null );

        $this->router->setRoute( 'basket' );
        $this->router->routing();
        $this->assertEquals( $request->get( 'controller' ), 'basket' );
        $this->assertEquals( $request->get( 'action' ), 'index' );
    }

    public function testFindRouteTest()
    {
        $request = App::getInstance()->getRequest();
        $request->set( 'controller', null );

        $this->router->setRoute( 'test' );
        $this->router->routing();
        $this->assertEquals( $request->get( 'controller' ), 'test' );
        $this->assertEquals( $request->get( 'action' ), 'test' );
    }

    public function testFindRouteIndex()
    {
        App::getInstance()->getRequest()->set( 'controller', null );
        $this->router->setRoute( 'index' );
        $this->router->routing();
    }

    public function testFindRouteCatalogWithId()
    {
        $request = App::getInstance()->getRequest();
        $request->clearAll();
        $request->set( 'controller', null );
        $this->router->setRoute( 'catalog/id=3' );
        $this->router->routing();
        $this->assertEquals( '3', $request->get( 'id' ) );
    }

    public function testCreateLinkCatGallery()
    {
        $url = $this->router->createLink( '', array(
            'controller'=> 'catgallery',
            'id'        => 5
        ) );
        $this->assertEquals( '/catgallery/index/id/5', $url );
    }

    /**
     * @todo Implement testFindStructure().
     */
    public function testFindStructure()
    {
        // @TODO Remove the following lines when you implement this test.
    }

    /**
     * @todo Implement testRouting().
     */
    public function testRouting()
    {
        // @TODO Remove the following lines when you implement this test.
    }

    /**
     * @todo Implement testIsSystem().
     */
    public function testIsSystem()
    {
        // @TODO Remove the following lines when you implement this test.
    }

    public function testSetRoute()
    {
        $this->router->setRoute( 'index' );
        $this->assertEquals( $this->router->getRoute(), 'index' );
    }

    public function testGetRoute()
    {
        $this->router->setRoute( 'index' );
        $this->assertEquals( $this->router->getRoute(), 'index' );
    }
}
