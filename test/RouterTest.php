<?php

/**
 * Test class for Router.
 * Generated by PHPUnit on 2011-02-16 at 17:04:19.
 */
use Sfcms\Router;
use Sfcms\Request;

class RouterTest extends PHPUnit_Framework_TestCase
{
    /**
     * @var Router
     */
    protected $router;

    /**
     * @var Request
     */
    protected $request;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->request = Request::create('/');
        $this->router  = App::cms()->getRouter();
        $this->router->setRequest($this->request);
        $this->router->setRewrite(true);
    }

    /**
     * @todo Implement testCreateLink().
     */
    public function testCreateLink()
    {
        $this->router->setRewrite(false);
        $url    = 'example/foo';
        $params = array(
            'par1' => 'val1',
            'par2' => 'val2'
        );

        $this->assertEquals(
            "/index.php/{$url}?par1=val1&par2=val2",
            $this->router->createLink($url, $params)
        );

        $this->router->setRewrite(true);

        $this->assertEquals(
            "/{$url}?par1=val1&par2=val2",
            $this->router->createLink($url, $params)
        );
    }

    public function testCreateLink2()
    {
        $this->assertEquals(
            '/',
            $this->router->createLink(null)
        );
    }

    public function testCreateLink3()
    {
        $this->assertEquals(
            '/',
            $this->router->createLink('/')
        );
    }

    public function testCreateLinkCatalog()
    {
        $this->assertEquals(
            '/catalog?id=50&page=2',
            $this->router->createLink('catalog', array('id' => 50, 'page' => 2))
        );
    }

    public function testCreateServiceLink2()
    {
        $this->assertEquals(
            '/',
            $this->router->createServiceLink('index')
        );
    }

    public function testCreateLinkZendStyle()
    {
        $this->assertEquals(
            '/page/create?id=123&page=7',
            $this->router->createLink(
                null,
                array(
                    'controller' => 'page',
                    'action'     => 'create',
                    'id'         => 123,
                    'page'       => 7,
                )
            )
        );
    }

    public function testCreateServiceLinkPage()
    {
        $this->assertEquals(
            '/page',
            $this->router->createServiceLink('page')
        );
    }

    public function testCreateServiceLinkPage2()
    {
        $this->assertEquals(
            '/page/edit',
            $this->router->createServiceLink('page', 'edit')
        );
    }

    public function testCreateServiceLinkPageNorewrite()
    {
        $this->router->setRewrite(false);
        $this->assertEquals(
            '/index.php/page',
            $this->router->createServiceLink('page')
        );
    }

    public function testCreateServiceLinkPage2Norewrite()
    {
        $this->router->setRewrite(false);
        $this->assertEquals(
            '/index.php/page/edit',
            $this->router->createServiceLink('page', 'edit')
        );
    }

    /**
     */
    public function testFindRoute()
    {
        // find route in routes.xml
//        $this->router->setRoute('page/nameconvert/id/123/page/7')->routing(true);
//        $this->assertEquals($this->request->getController(), 'page');
//        $this->assertEquals($this->request->getAction(), 'nameconvert');

//        $this->assertEquals('7', $this->request->get('page'));
//        $this->assertEquals('123', $this->request->get('id'));
    }

    public function testFindRouteAdminUsers()
    {
//        $this->markTestSkipped('used symfony router');
        $this->router->setRoute('/user/admin')->routing(true);

        $this->assertEquals('user', $this->request->getController());
        $this->assertEquals('admin', $this->request->getAction());
    }

    public function testFindRouteUsersCabinet()
    {
//        $this->markTestSkipped('used symfony router');
        $this->router->setRoute('/user/cabinet')->routing(true);
        $this->assertEquals('user', $this->request->getController());
        $this->assertEquals('cabinet', $this->request->getAction());
    }

    public function testFindRouteAdmin()
    {
        $this->router->setRoute('/admin');
        $this->router->routing(true);
        $this->assertEquals('page', $this->request->getController());
        $this->assertEquals('admin', $this->request->getAction());
    }

    public function testFindRouteUsersEdit()
    {
        $this->router->setRoute('/user/edit');
        $this->router->routing(true);
        $this->assertEquals('user', $this->request->getController());
        $this->assertEquals('edit', $this->request->getAction());
    }

    public function testFindRouteBasket()
    {
        $this->router->setRoute('/basket');
        $this->router->routing(true);
        $this->assertEquals('basket', $this->request->getController());
        $this->assertEquals('index', $this->request->getAction());
    }

    public function testCreateLinkCatGallery()
    {
        $url = $this->router->createLink('', array(
                'controller' => 'catgallery',
                'id'         => 5
            ));
        $this->assertEquals('/catgallery/index?id=5', $url);
    }

    public function testNewsOnly()
    {
        $this->router->setRoute('/news');
        $this->router->routing(true);
        $this->assertEquals('news', $this->request->getController());
        $this->assertEquals('index', $this->request->getAction());
        $this->assertEquals('2', $this->request->get('_id'));
    }

    public function testNewsRoute()
    {
        $link = $this->router->createLink('news/edit', array('id'=>10, 'page'=>5));
        $this->router->setRoute($link);
        $this->router->routing(true);
        $this->assertEquals('news', $this->request->getController());
        $this->assertEquals('edit', $this->request->getAction());
        $this->assertEquals('10', $this->request->get('id'));
        $this->assertEquals('5', $this->request->get('page'));
    }

    public function testNewsRouteByAlias()
    {
        $this->router->setRoute('/news/2-novostj-2');
        $this->router->routing(true);
        $this->assertEquals('news', $this->request->getController());
        $this->assertEquals('2-novostj-2', $this->request->get('alias'));
        $this->assertEquals('inner', $this->request->getTemplate());
    }

    public function testNewsRouteByAlias2()
    {
        $this->router->setRoute('/blog/4-moya-pervaya-statjya');
        $this->router->routing(true);
        $this->assertEquals('news', $this->request->getController());
        $this->assertEquals('4-moya-pervaya-statjya', $this->request->get('alias'));
    }

    public function testCatalogRoute()
    {
        $this->router->setRoute('/catalog/HTC-Evo-3D');
        $this->router->routing(true);
        $this->assertEquals('catalog', $this->request->getController());
        $this->assertEquals('HTC-Evo-3D', $this->request->get('alias'));
    }

    public function testServiceLinkGrid()
    {
        $this->assertEquals('/goods/grid', $this->router->createServiceLink('goods', 'grid'));
    }

    /**
     * Маршрут включая модуль
     */
    public function testHaveModule()
    {
        //        $this->markTestSkipped();
        //        $this->router->setRoute('system/module/save');
        //        $this->router->routing(true);
        //        $this->assertEquals('system',$this->request->getModule());
        //        $this->assertEquals('module',$this->request->getController());
        //        $this->assertEquals('save',$this->request->getAction());
    }
}
